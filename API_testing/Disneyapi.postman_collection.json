{
	"info": {
		"_postman_id": "d0ff42e1-64c7-43cb-bcb5-ea87c0b4ddf0",
		"name": "Disneyapi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34701056"
	},
	"item": [
		{
			"name": "Character",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.code === 200) {\r",
							"    pm.test[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (pm.response.code === 401) {\r",
							"    pm.test[\"Not authorised, check access token or Log in\"] = false;\r",
							"} else if (pm.response.code === 403) {\r",
							"    pm.test[\"Forbiden\"] = false;\r",
							"} else if (pm.response.code === 404) {\r",
							"    pm.test[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (pm.response.code === 422) {\r",
							"    pm.test[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    pm.test[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response time is less than 10000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 30000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(30000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Info object must have the correct structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.info).to.be.an('object');\r",
							"    pm.expect(responseData.info).to.include.all.keys('count', 'totalPages', 'previousPage', 'nextPage');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    responseData.data.forEach(function(character) {\r",
							"        pm.expect(character.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"CreatedAt and UpdatedAt are in valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    responseData.data.forEach(function(character) {\r",
							"        pm.expect(new Date(character.createdAt)).to.not.be.NaN;\r",
							"        pm.expect(new Date(character.updatedAt)).to.not.be.NaN;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Header Keys/Values check\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"Cowboy\");\r",
							"    pm.expect(pm.response.headers.get(\"Nel\")).to.include('{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}');\r",
							"    pm.expect(pm.response.headers.get(\"Connection\")).to.include('keep-alive');\r",
							"    pm.expect(pm.response.headers.get(\"X-Powered-By\")).to.include(\"Express\");\r",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"*\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.include(\"23641\");\r",
							"    pm.expect(pm.response.headers.get(\"Etag\")).to.include('W/\"5c59-y1rqYZi0ko5Xd/hYfQr6cOFpc7Y\"');\r",
							"    pm.expect(pm.response.headers.get(\"Via\")).to.include(\"1.1 vegur\");\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Presence and format of the 'Nel' header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Nel\")).to.exist;\r",
							"    pm.expect(pm.response.headers.get(\"Nel\")).to.match(/.*?/); // Format validation\r",
							"});\r",
							"\r",
							"pm.test(\"Each film in the data array is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    responseData.data.forEach(function(character) {\r",
							"        character.films.forEach(function(film){\r",
							"            pm.expect(film).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Film should not be empty\");\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Allies and enemies are arrays\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    responseData.data.forEach(function(character) {\r",
							"        pm.expect(character.allies).to.be.an('array', \"Allies should be an array\");\r",
							"        pm.expect(character.enemies).to.be.an('array', \"Enemies should be an array\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Presence and format of the 'sourceUrl' property\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    responseData.data.forEach(function(character) {\r",
							"        pm.expect(character.sourceUrl).to.exist;\r",
							"        pm.expect(character.sourceUrl).to.match(/^http(s)?:\\/\\//); // Format validation\r",
							"    });\r",
							"});\r",
							"pm.test(\"Each character in the data array has a non-empty 'id' field\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    responseData.data.forEach(function(character) {\r",
							"        pm.expect(character._id).to.exist.and.to.be.a('number', \"ID should be a number\");\r",
							"    });\r",
							"});\r",
							"pm.test(\"Data type and format of the response body are valid\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    // Test the response body structure and values\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('info');\r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"    \r",
							"    // checking that each character in the data array has the required properties\r",
							"    pm.test(\"Character object structure is valid\", function () {\r",
							"        responseData.data.forEach(function(character) {\r",
							"            pm.expect(character).to.have.property('_id');\r",
							"            pm.expect(character).to.have.property('films');\r",
							"            pm.expect(character).to.have.property('shortFilms');\r",
							"            pm.expect(character).to.have.property('tvShows');\r",
							"            pm.expect(character).to.have.property('videoGames');\r",
							"            pm.expect(character).to.have.property('parkAttractions');\r",
							"            pm.expect(character).to.have.property('allies');\r",
							"            pm.expect(character).to.have.property('enemies');\r",
							"            pm.expect(character).to.have.property('sourceUrl');\r",
							"            pm.expect(character).to.have.property('name');\r",
							"            pm.expect(character).to.have.property('createdAt');\r",
							"            pm.expect(character).to.have.property('updatedAt');\r",
							"            pm.expect(character).to.have.property('url');\r",
							"            pm.expect(character).to.have.property('__v');\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.disneyapi.dev/character",
					"protocol": "https",
					"host": [
						"api",
						"disneyapi",
						"dev"
					],
					"path": [
						"character"
					]
				}
			},
			"response": []
		}
	]
}